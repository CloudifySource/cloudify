#in AbstractGSCommand, when some command throws an exception
op_failed = Operation failed. {0}

#when a user tries to invoke a command without connecting first
not_connected = The CLI is not connected to a Cloudify REST gateway. You can connect to an existing gateway by using the connect command, or alternatively use the bootstrap-cloud or bootstrap-localcloud commands to start the Cloudify management infrastructure and automatically connect to the REST gateway it creates.

#when a user types exit on the console
on_exit = Good Bye!

service_file_doesnt_exist= The service file or folder you have specified does not exist in any of these paths : {0}

#when performing install/pack on a folder that does'nt exist
folder_doesnt_exist = Folder {0} does not exist

#when validating a dsl file that does not exist
file_doesnt_exist = File {0} does not exist

read_dsl_file_failed = Failed to read dsl file {0}. Error was: {1}.
read_dsl_file_from_folder_failed = Failed to read dsl file from folder {0}. Error was: {1}.

#when a user tries to install a service without performing pack first
service_not_packed = Service {0} has not been packaged properly, please make sure your application is properly packaged

#after a successful service installation
service_install_ended = Service "{0}" successfully installed

#after a successful service installation
service_install_failed = Installation of service "{0}" failed

#after a successful pack command. the argument is the absolute path of the packed file.
packed_successfully = Application deployment packaged successfully into {0}

#application not found when trying to install
application_not_found = The application file or folder you have specified does not exist in any of these paths : {0}

#cloud driver config file not found
cloud_driver_file_doesnt_exist = The cloud configuration file does not exist in any of these paths : {0}

#service not found when performing start/undeploy/addInstance/...
service_not_found = Could not find service {0}

#dsl validation is successful. The argument is the absolute file path
validated_successfully = Validated DSL file {0} successfully

#when connect command was successful
connected_successfully = Connected successfully

#when connect command was successful with ssl
connected_successfully_with_ssl = Connected successfully over SSL

#when the cloud overrides file is to long
cloud_overrides_file_to_long = cloud overrides file is to long. file size limit is 10K

#when connect command was unsuccessful
connection_failed = Failed to connect to REST gateway
connection_failed_with_error = Failed to connect: {0}

#when login command was successful
logged_in_successfully = Logged in successfully

#when disconnect command was successful
disconnected_successfully = Disconnected successfully

#when a service deployment was successful
deployed_successfully = Successfully deployed {0}

#when a service deployment was unsuccessful
deployment_failed = Deployment failed

#when a service undeployment was successful
undeployed_successfully = Successfully undeployed {0}

#when a service undeployment was unsuccessful
undeploy_failed = Failed to undeploy service {0}, error: {1} 

#when an addInstance command was successful
added_instance_successfully = Instance incremented successfully

#when an addInstance command was unsuccessful
add_instance_failed = Failed to add instance

#when a removeInstance command was successful
instance_removed_successfully = Successfully removed instance {0}

#when a removeInstance command was unsuccessful
instance_remove_failed = Failed to remove instance

#when calling removeInstance but num of instances is already 0
num_instances_zero = Number of instances is already 0

#when a restart command was successful
instance_restarted_successfully = Instance {0} of service {1} restarted successfully
multi_instance_restarted_successfully = Instances {0} of service {1} restarted successfully

#when an unknown rest response is returned from the rest server
illegal_rest_response= Illegal response received from REST gateway: {0}

#when the user type in an unknown service type
unknown_service_type = Unknown service type: {0}

#when the user types a malformed URL
could_not_parse_url = Illegal URL format: {0}

#when setting the application name
using_application = Using application {0}

application_does_not_exist = {0} is not deployed. Do you want to create this context?

#when an operation is aborted
operation_aborted = Operation {0} aborted

#when trying to connect to an already connected server
already_connected = Already connected, to connect to another admin server call the disconnect command first

#when specifying a list of ids that cannot be parsed as integer array
id_array_illegal_format = Illegal format for list of IDs: {0}. You should specify by a comma separated list. e.g. 1,2,3

#when no instances for a certain service exist
no_instances_found = No instances found for service {0}

#When calling an unimplemented command
command_not_implemented = The {0} operation is not yet supported

#When failing to add an instance for a certain service
failed_to_add_instance = Failed to add instance for service {1} of application {0}

#When failing to find a processing unit after a service deployment
failed_to_locate_service_after_deployment = Failed to deploy service

#When failing to locate a specific service instance
service_instance_unavailable = Instance {2} of service {1} of application {0} could not be reached

#When failing to locate an application
failed_to_locate_app = Application {0} could not be found or has no services deployed

#When failing to locate a lus on the server side
failed_to_locate_lookup_service = Failed to locate a lookup service in the cloud endpoint with discovery groups:{0} and locators:{1} 

#When using admin api facade and lus is not available
failed_to_locate_lookup_service_admin_api_facade = Failed to locate a lookup service

#When failing to locate esm on the server side
failed_to_locate_esm = Failed to locate a cloud controller

#When failing to locate gsm on the server side
failed_to_locate_gsm = Failed to locate a cloud controller

#When specifying an unknown component type
unknown_component_type = Unknown component type specified: {0}

#On undeployment failure
failed_to_undeploy_service = Failed to undeploy service {0}

#Failed to deploy service
failed_to_deploy_service = Failed to deploy service {0}

#Communication Error
comm_error = Communication Error accessing {0}. Reason: {1}

updated_succesfully = Updating number of instances of service {0} to {1}

#when the user tries to connect using AdminApi
could_not_connect_to_localhost_using_admin = You are using a local Admin. The url argument must be left blank.

#When setting the admin as REST/LOCAL ADMIN API was successful 
adminSet_Successful = Admin set to {0} successfully

#When uninstalling service that doesn't exist
failed_to_locate_service = Failed to locate service {0}

application_installed_succesfully = Application {0} installed successfully

application_installation_failed = Application {0} could not be installed
application_uninstalled_succesfully = Application {0} uninstalled successfully

#When an operation times out
operation_timeout = Operation timed out: {0}

#When azure bootstrap completes succesfully
bootstrap_succesfully = Azure application bootstrap completed successfully

#When a test recipe finished to 
test_recipe_success = Recipe test completed

#When a test recipe fails with a non zero return value
test_recipe_failure = Recipe test failed with return code {0}. See log messages for more details.

#When a test recipe fails with a non zero return value
test_recipe_service_lifecycle_missing = Recipe service file does not contain a lifecycle closure. Recipe test failed.

not_jar_or_zip = File {0} is not a jar or zip file

#when starting the deployment
deploying_service = deploying {0} service

#while waiting for instances after deployment
deploying_service_updates = Planned service instances: {0}, Actual service instances: {1}

#before a long running operation starts
expected_execution_time = It is currently {0}.\nThe following operation is expected to take between 15-30 minutes.

# install application state messages
install_service_start = Installing service: {0}

application_file_format_mismatch = {0} is not a zip or jar file

number_of_instances_exceeded_planned = expected {0}, found {1}. Please contact your system administrator.

invocation_success = {0}: OK from {1}, Result: {2}

invocation_failed = {0}: FAILED from {1}, Error: {2}

CLI_unable_to_parse_to_JSON = Unable to process server response: {0} 

Remote_rest_gateway_exception = Error occurred on remote server: {0}

URL_not_found = The specified URL could not be resolved: {0}

no_permission_access_is_denied = Permission not granted, access is denied.

bad_credentials = Bad credentials.

#When User tries to uninstall a service that has been installed as a part of an application installation
cant_find_service_for_app = Can't find service "{0}" in application "{1}"

#When trying to deploy an application that is already deployed.
application_already_deployed = Application "{0}" is already deployed. Use "uninstall-application {0}" to uninstall the existing application, before installing the new application.

#When an agent terminated successfully
teardown_localcloud_terminated_successfully = SUCCESSFULLY COMPLETED LOCAL-CLOUD TEARDOWN

#When an agent was not found upon teardown
teardown_failed_agent_not_found = Teardown aborted, an agent was not found on the local machine.

#When the cloud terminated successfully
cloud_terminated_successfully = Cloud terminated successfully.


#Confirmation question for when uninstalling an application.
application_uninstall_confirmation = Are you sure you want to uninstall application: <{0}>? [y/n]

#Confirmation question for when uninstalling an application.
version_check_confirmation = Would you like to check for updates? [y/n]
newer_version_exists = A newer Cloudify version is available for download at http://www.cloudifysource.org/downloads/get_cloudify.
version_up_to_date = The Cloudify version you are using is up to date.
could_not_get_version = Uh Oh! Something went wrong, we could not verify the latest version for you.

#Confirmation question for when timeout expires while service installation
would_you_like_to_continue_service_installation = The service installation timed out on the client side. would you like to continue viewing the installation progress of <{0}> [y/n]

#Confirmation question for when timeout expires while application installation
would_you_like_to_continue_application_installation = The application installation timed out on the client side. would you like to continue viewing the installation progress of <{0}> [y/n]

would_you_like_to_continue_polling_on_instance_lifecycle_events = The set-instances command timed out on the client side. would you like to continue viewing the instance lifecycle events?<{0}> [y/n]

#Application installation timeout message
application_installation_timed_out_on_client = The installation of '<{0}>' timed out on the client side. The application is still installed, To remove it use the Uninstall-Application command. 

#Service installation timeout message
service_installation_timed_out_on_client = The Installation of '<{0}>' timed out on the client side. The service is still installed, To remove it use the Uninstall-Service command.

#Confirmation question for when uninstalling a service.
service_uninstall_confirmation = Are you sure you want to uninstall service: <{0}>? [y/n]

uninstall_aborted = The uninstall action was aborted

cannot_uninstall_management_application = Management application can not be undeployed

#When all invokes completed successfully.
all_invocations_completed_successfully = invocation completed successfully.

#When not all invocation succeeded.
not_all_invocations_completed_successfully = One or more command invocations on {0} failed: {1}.

########CLOUD BOOTSTRAP MESSAGES#########

# when starting bootstrap-cloud 'Provider'
bootstrapping_cloud = Bootstrapping cloud {0}. This may take a few minutes. 

# before trying to connect to to the cloud API 
try_to_connect_to_cloud_api = Establishing connection with provider {0}.

# starting security profile (nonsecure/secure/ssl)
set_security_profile = Setting security profile to "{0}".

connection_to_cloud_api_succeeded = Established connection with provider {0}. 
connection_to_cloud_api_failed = Failed to connect to provider {0}.

attempting_to_create_management_vms = Attempting Cloudify Management VM provisioning.

failed_to_create_management_vm = Failed to create Cloudify Management VM: Error {0}.

management_started_successfully = Management started successfully.

attempting_to_access_vm = Attempting to access Management VM {0}.

waiting_for_ec2_windows_password = Waiting for Windows Password on Server {0} to become available

ec2_windows_password_retrieved = Windows Password on Server {0} is available

uploading_files_to_node = Uploading files to {0}.

launching_agent_on_node = Launching agent on {0}.

install_completed_on_node = Established connection with Management VM {0}.

cloud_started_successfully = Successfully created Cloudify Manager on provider {0}. Use the "teardown-cloud {0}" command to terminate all machines.

powershell_output_line = VERBOSE:{0}

#############################################
# When set-instances completed successfully
set_instances_completed_successfully = Service {0} now running with {1} instances
# When set-instances invoked on non-elastic service
service_not_elastic = Service {0} is not elastic
# When set-instances invoked with count equal to current num of instances
num_instanes_already_met = Service already has {0} instances

removing_service_instances = Shutting down instances of service {0}

failed_to_access_rest_before_teardown = Teardown failed. Failed to fetch the currently deployed applications list. For force teardown use the -force flag.

apps_deployed_before_teardown_localcloud = Teardown failed. There are still applications deployed:{0}. Use the '-force' flag to force shutdown the management components.

failed_to_uninstall_app_before_teardown = Teardown failed. Application {0} faild to uninstall.

all_apps_removed_before_teardown = All applications were successfully uninstalled. 

completed_localcloud_teardown = Completed local-cloud teardown

failed_to_invoke_instance = Error invoking pu instance {0}:{1}. Cause: {2} 

no_processing_unit_instances_found_for_invocation = Failed to invoke custom command on pu {0}. No pu instances found. 

local_cloud_started = Local-cloud started successfully. Use the teardown-localcloud command to shutdown all processes.

command_interrupted = Command interrupted by user.

set_instances_not_supported_on_eager = set-instances not allowed in Eager deployment. 

starting_cloudify_management = STARTING CLOUDIFY MANAGEMENT

starting_bootstrap_localcloud = Bootstrapping localcloud, this may take a few minutes

starting_management_web_service = STARTING CLOUDIFY {0}

web_service_available_at = {0} service is available at: {1}

teardown_localcloud_confirmation_question = Teardown will shut down the local cloud. Do you want to continue? [y/n]

teardown_cloud_confirmation_question = Teardown will shut down all services installed on the cloud. Do you want to continue? [y/n]

teardown_aborted = The teardown action was aborted.

uninstalling_applications_before_teardown = UNINSTALLING RUNNING APPLICATIONS

agent_not_found_on_teardown_command = Agent not running on local machine

shutting_down_cloudify_agent_teardown_localcloud = SHUTTING DOWN CLOUDIFY AGENT 

shutting_down_cloudify_managment = SHUTTING DOWN CLOUDIFY MANAGEMENT COMPONENTS

teardown_localcloud_ended_successfully = SUCCESSFULLY COMPLETED LOCAL-CLOUD TEARDOWN

agent_terminated_successfully = Agent was terminated successfully.

# cloud provisioning error messages
prov_invalid_configuration = Failed to create cloud deployer, invalid configuration.

prov_missing_nodesList_configuration = Failed to create cloud deployer, invalid configuration for template [{0}] - nodes list is missing.

prov_deployer_creation_failed = Failed to create cloud deployer.

prov_failed_to_start_machine = Failed to start cloud machine.

prov_failed_to_start_machine_on_ip = Failed to start cloud machine on {0}.

prov_failed_to_stop_machine = Failed to stop cloud machine.

prov_failed_to_stop_management_machine = Failed to stop cloud management machine.

prov_servers_limit_reached = Number of servers has exceeded allowed server limit ({0}).

prov_ssh_failed = SSH connection failed on server {0}.

prov_management_lookup_failed = Failed to lookup existing management servers.

prov_management_server_not_found = A management server could not be found (At least one is required).

prov_management_server_not_found_with_prefix = A management server could not be found with prefix {0} (At least one is required).

prov_agent_shutdown_failed = Failed to shutdown agent.

prov_management_machines_failed = One or more management machines failed. The first encountered error was: {0}.

prov_node_loading_failed = Cloud node loading failed, missing credentials for server: {0}.

prov_missing_server_name = Failed to start cloud node, server name is missing.

prov_pool_exhauseted = Failed to create new cloud node, all nodes are currently used.

prov_invalid_node_configuration = Failed to start cloud node, invalid nodes IP/ID configuration.

prov_invalid_ip_address = Invalid IP address: {0}.

prov_invalid_ip_range_format = Failed to start cloud node, invalid IP range configuration: {0} is missing the token \"-\".


missing_java_home = JAVA_HOME environment variable is not set

incorrect_java_home = JAVA_HOME environment variable is set to {0} which does not appear to be a valid JDK

dump_file_too_large = Dump file size({0}) exceeds file size limit ({1})

you_must_set_one_of_tail_option = Two tail options can not be set. Use either -hostAddress or the -instanceId option, or leave options blank.

the_log_could_not_be_saved_to_file = an error occurred while saving the log tail to {0}

log_tail_successfully_saved_to_file = The logs tail was successfully saved to {0}

attributes_updated_successfully = Attributes updated successfully
attributes_removed_successfully = Attributes removed successfully

# the message sent to the CLI in this case will be missing the single quotes around the entire string. This is because the string is formatted twice
# once when we generate the string output and again when the message is passed to the logger - this creates complate chaos due to the use of single quote
# charactes as escape sequences by the MessageFormat class. 
illegal_attribute_format = Illegal attribute format: {0}. The correct format is '''{'"<attribute key>":"<attribute value>"'}''' 
no_attributes_found = No attributes could be found, please check your attributes syntax. The correct format is \"{<attribute 1 key>:<attribute 1 value>,<attribute 2 key>:<attribute 2 value>}"

service_scope_must_contain_service_name = When using the "service" scope you must also specify a service name using the following syntax: service:<service name>

illegal_scope = Illegal attribute scope: {0}

service_has_no_instances = The service {0} for which you're trying to set attributes does not have any running instances

illegal_instance_identifier = Illegal instance identifier: {0}

cloud_configuration_file_not_found = Could not find cloud configuration at {0}

# recipe validation messages
service_parsing_success = Service {0} validated successfully
service_parsing_failure = Service could not be validated: {0} 

application_parsing_success = Application {0} validated successfully
application_parsing_failure = Application could not be validated: {0} 


bad_license = Illegal cloudify license: {0}

version_mismatch = Version mismatch between Cloudify REST gateway and Cloudify CLI: CLI version is [{0}] while server version is [{1}]

missing_template = Could not find compute template: {0}
service_already_installed = Service {0} already installed

# when login fails
failed_to_login = Failed to login.

# when user is not verified as a Cloudadmin
user_is_not_cloudadmin = User is not a CloudAdmin

# add/remove templates
local_cloud_not_support_tempaltes_operations = Local cloud doesn't support {0}.

# add templates
illegal_template_file_name = Illegal template name [{0}]\n(template file should have a name of the format "*-template.groovy").
templates_file_not_found = Could not find templates file: {0}.
too_many_template_files = Given a template file parameter to add-templates, there should not be other template files in the same directory.\nFound template files: {0}.
no_template_files = There are no template files in folder [{0}].
failed_to_rename_template_file = Failed to rename template file from {0} to {1}, a file with that name is already exist: {2}.
failed_to_add_templates = Failed to add templates: {0}
partly_failed_to_add_templates = Failed to add the following templates: {0}\nSuccessfully added the following templates: {1}
templates_added_successfully = Templates added successfully.

# remove templates
failed_to_remove_template_in_use = Failed to remove template [{0}] - the template is being used by the following services: {1}.
failed_to_remove_template = Failed to remove template [{0}] from the following IPs: {1}.
tamplate_not_exist = The template [{0}] does not exist.
failed_to_remove_template_file = Failed to remove template file {0}, error: {1}.
template_removed_successfully = Template {0} removed successfully. 

general_server_error = Remote operation failed: {0} 

invalid_keystore_file = Invalid keystore file: {0}

application_name_is_already_in_use = Application name '<{0}>' is in use by a different group.
