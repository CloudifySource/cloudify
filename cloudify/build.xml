<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>
<!--
 * Title:        GigaSpaces Cloudify ant file.
 make sure that root directory is updated with latest src and files from SVN.

 * Copyright:    Copyright (c) 2011
 * Company:      GigaSpaces Technologies Ltd.
 * @author       Alex Beresnev
 * @version      2.0.0
-->


<project name="Cloudify-Assembly" default="usage" basedir=".">
	
	<condition property="build.repository.path" value="\\tarzan\builds">
		<os family="windows" />
	</condition>

	<condition property="build.repository.path" value="/export/builds">
		<os family="unix" />
	</condition>

	<condition property="mvn.executable" value="mvn.bat">
            <os family="windows" />
    </condition>

    <condition property="mvn.executable" value="mvn">
            <os family="unix" />
    </condition>
	
	<loadproperties srcfile="${basedir}/build.properties" />
	
    <property environment="env."/>
	<property name="tmp.dir" value="${basedir}/tmp" />
	<property name="xap.files.tmp.dir" value="${basedir}/xap.files.tmp.dir" />
	<property name="xap.bigdata.dir" value="xap-bigdata" />
	<property name="xap.installation.dir" value="gigaspaces-xap-premium-${gs.version}-${gs.milestone}" />
	<property name="xap.zip.name" value="${xap.installation.dir}-b${gs.build.number}.zip" />
	<property name="xap.zip.full.path" value="${build.repository.path}/${gs.version}/build_${gs.build.number}/xap-premium/1.5/${xap.zip.name}" />
	<property name="cloudify.installation.dir" value="gigaspaces-cloudify-${cloudify.version}-${cloudify.milestone}" />
	<property name="cloudify.zip.name" value="${cloudify.installation.dir}-b${cloudify.build.number}.zip" />
	<property name="xap.zip.full.path" value="${build.repository.path}/cloudify/${cloudify.version}/build_${cloudify.build.number}/product/${xap.zip.name}" />
	<property name="CLOUDIFY" value="Cloudify" />
	<property name="cloudify" value="cloudify" />
	<property name="gs.runtime.jar" value="gs-runtime.jar" />
	<property name="gs.boot.jar" value="gs-boot.jar" />
	<property name="gs.webui.war" value="gs-webui.war" />
	<property name="usm.local.copy" value="${basedir}/../USM" />
	<property name="esc.local.copy" value="${basedir}/../esc" />
	<property name="recipes.local.copy" value="${basedir}/../recipes" />
	<property name="dsl.local.copy" value="${basedir}/../dsl" />
	<property name="cli.local.copy" value="${basedir}/../CLI" />
	<property name="azure.local.copy" value="${basedir}/../azure" />
	<property name="restful.local.copy" value="${basedir}/../restful" />
	<property name="esc-commands.local.copy" value="${basedir}/../esc-commands" />
	<property name="releases.dir" value="${basedir}/releases" />
	<property name="build.prefix" value="build_" />
	<property name="package.build" value="${basedir}/package_build" />
	<property name="gigaspaces.related.folder" value="${package.build}/gigaspaces" />
	<property name="gs-webui.related.folder" value="${package.build}/gs-webui" />
	<property name="platform.verion.file.name" value="CloudifyVersion.java" />
	<property name="cloudify.base.container" value="gigaspaces-repository" />
	<property name="cloudify.cdn.publish.url" value="http://repository.cloudifysource.org" />
 	<property name="cloudify.put.target" value="org/cloudifysource/${cloudify.version}/gigaspaces-${cloudify}-${cloudify.version}-${cloudify.milestone}-b${cloudify.build.number}.zip" />
	<property name="bigdata.put.target" value="com/gigaspaces/xap/${s3.gs.publish.folder}/${xap.zip.name}" />
 	<property name="cloudify.put.source" value="${releases.dir}/build_${cloudify.build.number}/${cloudify}/1.5/gigaspaces-${cloudify}-${cloudify.version}-${cloudify.milestone}-b${cloudify.build.number}.zip" />
	<property name="bigdata.put.source" value="${releases.dir}/build_${gs.build.number}/${xap.bigdata.dir}/1.5/${xap.zip.name}" />
	<property name="tools.lib.dir" value="${basedir}/tools/lib" />
	<property name="cloudify.base.container" value="gigaspaces-repository" />
	<property name="cloudify.base.publish.url" value="https://s3.amazonaws.com/${cloudify.base.container}" />
	<property name="build.properties.file" value="build.properties"/>
	<taskdef resource="org/tigris/subversion/svnant/svnantlib.xml" classpath="${tools.lib.dir}/svn/svnant.jar;${tools.lib.dir}/svn/svnClientAdapter.jar"/>
							
	<!-- these should be injected when running the publish build
	<property name="publish.cloudify.build" value="run" /> 
	<property name="put.user" value="AWS User" />
	<property name="put.key" value="AWS Key />
	-->
	
	<!-- ${svnant.repository.user} and ${svnant.repository.passwd} are defined in Basic Settings of root configuration in QuickBUild -->
	
	<target name="update_platform_version" depends="replace.build.related.settings,replace.cloudify.build.number" unless="gs.internal.systems.not.available">
       <svn javahl="false" username="${svnant.repository.user}" password="${svnant.repository.passwd}" failonerror="false">
           <commit message="803 Build version advanced to ${cloudify.build.number}">
           		<fileset dir="${basedir}">
       				<include name="**/${platform.verion.file.name}" />
   					<include name="${build.properties.file}" />
   				</fileset>
           </commit>
       </svn>
   </target>
	
	<target name="usage">
	        <echo message=""/>
	        <echo message="Cloudify build script"/>
	        <echo message="-----------------------------------------"/>
	        <echo message=""/>
	        <echo message=""/>
			<echo message="clean.all       --> clean all temp folders"/>
	        <echo message="cloudify.zip    --> creates Cloudify zip from sourcecode"/>
	        <echo message=""/>
	    </target>
	
	<target name="replace.cloudify.build.number" if="cloudify.build.number">
       <property name="build.number.field" value="BUILD_NUM" />
       <property name="milestone.field" value="MILESTONE" />
       <property name="build.type.field" value="BUILD_TYPE" />
	   <property name="version.field" value="VERSION" />
		
	
       <replaceregexp file="${gigaspaces.related.folder}/src/java/com/j_spaces/kernel/${platform.verion.file.name}"
                        match="${build.number.field} = (.*)"
                        replace='${build.number.field} = "${cloudify.build.number}";'/>

       <replaceregexp file="${gigaspaces.related.folder}/src/java/com/j_spaces/kernel/${platform.verion.file.name}"
                        match="${milestone.field} = (.*)"
                        replace='${milestone.field} = "${cloudify.milestone}";'/>

       <replaceregexp file="${gigaspaces.related.folder}/src/java/com/j_spaces/kernel/${platform.verion.file.name}"
                                match="${build.type.field} = (.*)"
                                replace='${build.type.field} = "${build.type}";'/>
		
		<replaceregexp file="${gigaspaces.related.folder}/src/java/com/j_spaces/kernel/${platform.verion.file.name}"
		                                match="${version.field} = (.*)"
		                                replace='${version.field} = "${cloudify.version}";'/>
   </target>
	
	<!-- Remark: XAP  properties are updated from the XAP build --> 
	<target name="replace.build.related.settings" if="cloudify.build.number">
		<property name="cloudify.version.field" value="cloudify.version" />
		<property name="cloudify.build.number.field" value="cloudify.build.number" />
		<property name="cloudify.milestone.field" value="cloudify.milestone" />
		
		
		<replaceregexp file="${build.properties.file}"
            match="${cloudify.version.field}=(.*)"
            replace="${cloudify.version.field}=${cloudify.version}"/>
		
		<replaceregexp file="${build.properties.file}"
            match="${cloudify.build.number.field}=(.*)"
            replace="${cloudify.build.number.field}=${cloudify.build.number}"/>
		
		<replaceregexp file="${build.properties.file}"
            match="${cloudify.milestone.field}=(.*)"
            replace="${cloudify.milestone.field}=${cloudify.milestone}"/>
   </target>
	
    <target name="update.lus.groups">
        <echo message="Updating LUS Groups in directory: ${tmp.dir}/${cloudify.installation.dir} ..."/>
        <property name="lookup.group" value="gigaspaces-${CLOUDIFY}-${cloudify.version}-${cloudify.milestone}"/>
    	<replaceregexp match="LOOKUPGROUPS=(.*)" replace="LOOKUPGROUPS=&quot;${lookup.group}&quot;">
    		<fileset dir="${tmp.dir}/${cloudify.installation.dir}" includes="**/*.sh, **/*.bat, **/*.xml"/>
    	</replaceregexp>
    </target>

    <macrodef name="add.cloudify.modules">
    	<attribute name="installation.dir" default="${tmp.dir}/${cloudify.installation.dir}"/>
    	<sequential>	
	        <echo message="Copy USM component"/>
	        <copy todir="@{installation.dir}/lib/platform/usm" overwrite="true">
	            <fileset dir="${usm.local.copy}/target/" includes="usm.jar" excludes=".svn"/>
	        </copy>
	
	        <copy todir="@{installation.dir}/lib/platform/esm" overwrite="true">
	            <fileset dir="${esc.local.copy}/target/esc/lib" includes="*.jar" excludes=".svn"/>
	        </copy>
	
	        <echo message="Copy recipes component"/>
	        <mkdir dir="@{installation.dir}/recipes/services"/>
	     
	        <unzip src="${recipes.local.copy}/target/recipes.zip" dest="@{installation.dir}/recipes" />
	   
	    		
	        <echo message="Copy dsl component"/>
	        <copy todir="@{installation.dir}/lib/required" overwrite="true">
	            <fileset dir="${dsl.local.copy}/target/" includes="dsl.jar" excludes=".svn"/>
	        </copy>
	
	        <echo message="Copy CLOUDIFY CLI component"/>
	        <copy todir="@{installation.dir}/tools/cli/" overwrite="true">
	            <fileset dir="${cli.local.copy}/target/" includes="cli.jar" excludes=".svn"/>
	            <fileset dir="${cli.local.copy}/" includes="cloudify.*" excludes=".svn"/>
	        </copy>
	    	<copy todir="@{installation.dir}/bin" overwrite="true">
	            <fileset dir="${gigaspaces.related.folder}/bin" includes="cloudify.*" excludes=".svn"/>
	        </copy>
	
	        <echo message="Copy CLOUDIFY Azure component"/>
	        <copy todir="@{installation.dir}/tools/cli/plugins/azure" overwrite="true">
	            <fileset dir="${azure.local.copy}/azure/src/main/resources/azure" includes="**/*" excludes=".svn"/>
	            <fileset dir="${azure.local.copy}/azure/target/" includes="azure.jar" excludes=".svn"/>
	        </copy>
	
	        <echo message="Copy CLOUDIFY Rest component"/>
	        <copy todir="@{installation.dir}/tools/rest/" overwrite="true">
	            <fileset dir="${restful.local.copy}/target/" includes="rest.war" excludes=".svn"/>
	        </copy>
	
	        <echo message="Copy CLOUDIFY esc-command component"/>
	        <copy todir="@{installation.dir}/tools/cli/plugins/esc" overwrite="true">
	            <fileset dir="${esc-commands.local.copy}/target" includes="esc-commands.jar" excludes=".svn"/>
	        </copy>
	        
	        <copy todir="@{installation.dir}/tools/cli/plugins/esc" overwrite="true">
	          <fileset dir="${esc.local.copy}/src/main/resources/clouds" includes="**/*" excludes=".svn"/>
	        </copy>
		</sequential>
    </macrodef>

	
	<target name="add.cloudify.javadoc">
		<!-- Add Cloudify Javadoc archive to Cloudify/docs folder. If the folder doesn't exist please run: mvn javadoc:javadoc --> 
    	<zip file="${tmp.dir}/${cloudify.installation.dir}/docs/cloudify-javadoc.zip">
    		<fileset dir="${basedir}/target/site/apidocs"/>
		</zip>
	</target>
	
	<target name="replace.xap.content.with.cloudify.related">
		<copy todir="${tmp.dir}/${cloudify.installation.dir}" file="${gigaspaces.related.folder}/START_HERE.htm"/>
			    	
    	<!-- replace dynamic_props.js in gs-webui war -->
    	<war warfile="${tmp.dir}/${cloudify.installation.dir}/tools/gs-webui/${gs.webui.war}" update="true">
            <fileset dir="${gs-webui.related.folder}/war"/>
        </war>
	</target>

	<macrodef name="unzip.xap">
		<attribute name="new.installation.dir.name"/>
		<sequential>
			<delete dir="${tmp.dir}"/>
			<mkdir dir="${tmp.dir}"/>
			<copy file="${xap.zip.full.path}" todir="${tmp.dir}"/>
			<unzip src="${tmp.dir}/${xap.zip.name}" dest="${tmp.dir}" />
			<delete file="${tmp.dir}/${xap.zip.name}"/>
			<move file="${tmp.dir}/${xap.installation.dir}" tofile="${tmp.dir}/@{new.installation.dir.name}" />
			<chmod dir="${tmp.dir}/@{new.installation.dir.name}" includes="**/*.sh, **/*groovy*" perm="775"  />
		</sequential>
	</macrodef>

    <target name="prepare.cloudify.package" >
		<loadproperties srcfile="${basedir}/${build.properties.file}"/>
    	<condition property="working.roles.exists">
    		<resourceexists>
                    <file file="${azure.local.copy}/WorkerRoles.zip"/>
            </resourceexists>
    	</condition>
    	<unzip.xap new.installation.dir.name="${cloudify.installation.dir}"/>
    	<ant target="update.gs.runtime" />
    	<ant target="remove.xap.related.modules" />
        <ant target="update.lus.groups"/>
        <add.cloudify.modules/>
    	<ant target="add.cloudify.javadoc"/>
    	<ant target="replace.xap.content.with.cloudify.related"/>
        <ant target="replace.cloudify.license"/>
    	<ant target="replace.cloudify.notice"/>
    	<ant target="add.azure.artifacts" />
    	<dos2unix dir="${tmp.dir}/${cloudify.installation.dir}" />
 
    	<!-- conditional task (with property: publish.cloudify.build) -->
    	<ant target="prepare.cloudify.for.publish" />
    	 
        <ant target="archive.cloudify.versions"/>
    	
    	<!-- conditional task (with property: publish.cloudify.build) -->
    	<ant target="publish.cloudify.to.storage" />
    	
    </target>
	
	<target name="remove.xap.related.modules">
		<delete file="${tmp.dir}/${cloudify.installation.dir}/docs/xap-javadoc.zip" />
		<delete dir="${tmp.dir}/${cloudify.installation.dir}/examples" />
		<delete dir="${tmp.dir}/${cloudify.installation.dir}/tools/benchmark"/>
		<delete dir="${tmp.dir}/${cloudify.installation.dir}/tools/maven/apache-maven-3.0.2"/>
		<delete>	
            <fileset dir="${tmp.dir}/${cloudify.installation.dir}/bin" includes="gs-focalserver.*, gsInstance.*,
            startJiniTxMahalo.*, puInstance.*, gs-memcached.*, gs-ui.*"/>
        </delete>
	</target>

    <target name="replace.cloudify.license">
        <copy todir="${tmp.dir}/${cloudify.installation.dir}" file="${gigaspaces.related.folder}/gslicense.xml"/>
    </target>
	
	<target name="replace.cloudify.notice">
        <copy todir="${tmp.dir}/${cloudify.installation.dir}" file="${gigaspaces.related.folder}/notice.txt"/>
    </target>
	
	<macrodef name="dos2unix">
		<attribute name="dir"/>
		<sequential>
			<!-- Replaces EOLs with LF characters and removes eof characters 
			from the shell scripts. Tabs and spaces are left as is. -->
			<fixcrlf srcdir="@{dir}" 
		    		eol="lf"    		       
		    		eof="remove"
					includes="**/*.sh" 
		    		defaultexcludes="no"
			/>
			<!-- Replaces all EOLs with cr-lf pairs in the batch files. 
			Tabs and spaces are left as is. EOF characters are left alone if run on DOS systems, 
			and are removed if run on Unix systems. -->
			<fixcrlf srcdir="@{dir}"
			       eol="crlf"
			       includes="**/*.bat"
					defaultexcludes="no"
			/>
		</sequential>
	</macrodef>

   
    <!-- - - - - - - - - - - - - - - - - -
           target: archive.versions

           - creates  Cloudify
      - - - - - - - - - - - - - - - - - -->

    <target name="archive.cloudify.versions">
    		<delete dir="${releases.dir}/build_${cloudify.build.number}"/>
            <mkdir dir="${releases.dir}/build_${cloudify.build.number}/${cloudify}/1.5"/>
            <zip destfile="${releases.dir}/build_${cloudify.build.number}/${cloudify}/1.5/gigaspaces-${cloudify}-${cloudify.version}-${cloudify.milestone}-b${cloudify.build.number}.zip">
                <zipfileset dir="${tmp.dir}" includes="**/*" filemode="775"/>
            </zip>
    </target>
	
	<target name="archive.bigdata.version">
		<loadproperties srcfile="${basedir}/${build.properties.file}"/>
		<delete dir="${releases.dir}/build_${gs.build.number}"/>
        <mkdir dir="${releases.dir}/build_${gs.build.number}/${xap.bigdata.dir}/1.5"/>
        <zip destfile="${releases.dir}/build_${gs.build.number}/${xap.bigdata.dir}/1.5/${xap.zip.name}">
            <zipfileset dir="${tmp.dir}" includes="**/*" filemode="775"/>
        </zip>
    </target>
	
	<target name="copy.packages.to.build.repository" description="copy packages to build repository" unless="gs.internal.systems.not.available">
	   <loadproperties srcfile="${basedir}/${build.properties.file}"/>
       <copy todir="${build.repository.path}/${cloudify}/${cloudify.version}/${build.prefix}${cloudify.build.number}">
           <fileset dir="${releases.dir}/${build.prefix}${cloudify.build.number}"/>
       </copy>
	   <copy todir="${build.repository.path}/${gs.version}/${build.prefix}${gs.build.number}">
			<fileset dir="${releases.dir}/${build.prefix}${gs.build.number}"/>
	   </copy>
		
   	</target>
	
	<target name="add.azure.artifacts" if="working.roles.exists">
		<copy todir="${tmp.dir}/${cloudify.installation.dir}/tools/cli/plugins/azure" failonerror="false">
       		<fileset dir="${azure.local.copy}" includes="azureconfig.exe*"/>
		</copy>
		
		<copy todir="${tmp.dir}/${cloudify.installation.dir}/tools/cli/plugins/azure" failonerror="false"  >
       		<fileset dir="${azure.local.copy}" includes="WorkerRoles.zip"/>
		</copy>

		<unzip 
			dest="${tmp.dir}/${cloudify.installation.dir}/tools/cli/plugins/azure" 
			src="${tmp.dir}/${cloudify.installation.dir}/tools/cli/plugins/azure/WorkerRoles.zip">
		</unzip>
		<delete file="${tmp.dir}/${cloudify.installation.dir}/tools/cli/plugins/azure/WorkerRoles.zip" />
				
	</target>
	
	<target name="prepare.and.copy.packages" depends="update_platform_version">
		<ant target="prepare.cloudify.package" />
		<ant target="prepare.bigdata.package" />
		<ant target="copy.packages.to.build.repository" />
	</target>
	
	<target name="prepare.bigdata.package">
		<unzip.xap new.installation.dir.name="${xap.installation.dir}"/>
		<add.cloudify.modules installation.dir="${tmp.dir}/${xap.installation.dir}"/>
		<delete dir="${tmp.dir}/${xap.installation.dir}/recipes/services" excludes="mongodb/**, cassandra/**" includeemptydirs="true"/>	
		<delete dir="${tmp.dir}/${xap.installation.dir}/recipes/apps" includeemptydirs="true"/>
		<delete dir="${tmp.dir}/${xap.installation.dir}/bin" includes="cloudify*"/>
		<dos2unix dir="${tmp.dir}/${xap.installation.dir}" />
		<!-- conditional task (with property: publish.cloudify.build) -->
    	<ant target="prepare.bigdata.for.publish" />
		
		<ant target="archive.bigdata.version" />
		
    	<!-- conditional task (with property: publish.cloudify.build) -->
    	<ant target="publish.bigdata.to.storage" />
	</target>
	

	<target name="publish.cloudify.to.storage" if="publish.cloudify.build">
		
		<echo message="uploading cloudify installation to public storage (S3) at: ${cloudify.put.target}" />
			
		<exec executable="${env.M2_HOME}/bin/${mvn.executable}">
			<arg value="s3client:put" />
			<arg value="-Dput.user=${put.user}" />
			<arg value="-Dput.key=${put.key}" />
			<arg value="-Dput.source=${cloudify.put.source}" />
			<arg value="-Dput.target=${cloudify.put.target}" />
			<arg value="-Dcontainer=${cloudify.base.container}"/>
		</exec>
	</target>
	
	<target name="publish.bigdata.to.storage" if="publish.cloudify.build">
		
		<echo message="uploading bigdata installation to public storage (S3) at: ${bigdata.put.target}" />
			
		<exec executable="${env.M2_HOME}/bin/${mvn.executable}">
			<arg value="s3client:put" />
			<arg value="-Dput.user=${put.user}" />
			<arg value="-Dput.key=${put.key}" />
			<arg value="-Dput.source=${bigdata.put.source}" />
			<arg value="-Dput.target=${bigdata.put.target}" />
			<arg value="-Dcontainer=${cloudify.base.container}"/>
		</exec>
	</target>
	
	<target name="prepare.bigdata.for.publish" description="publish cloudify build to gigaspaces repository" if="publish.cloudify.build">
		<ant target="update.bigdata.service.configuration.url"/>
	</target>
	
	<target name="prepare.cloudify.for.publish" description="publish cloudify build to gigaspaces repository" if="publish.cloudify.build">
		<ant target="update.cloudify.service.configuration.url"/>
		<ant target="commit.service.configuration" />
	</target>
	
	<target name="update.bigdata.service.configuration.url">
		<property name="bigdata.url" value="${cloudify.cdn.publish.url}/${bigdata.put.target}" />

		<replaceregexp byline="true"
    		match="cloudifyUrl &quot;(.*)&quot;" 
    		replace="cloudifyUrl &quot;${bigdata.url}&quot;" >
    		<fileset 
    			dir="${tmp.dir}/${xap.installation.dir}/tools/cli/plugins/esc" 
    			includes="**/*-cloud.groovy" />
    	</replaceregexp>
   </target>
	
	<target name="update.cloudify.service.configuration.url">
        <echo message="Updating ServiceConfiguration in directory: ${tmp.dir}/${cloudify.installation.dir}/tools/cli/plugins/azure/WorkerRoles/GigaSpacesWorkerRoles ..."/>
		
		<property name="cloudify.url" value="${cloudify.cdn.publish.url}/${cloudify.put.target}" />

		<!-- Here we encode cloudify.url -->
		<property name="groovy.dir" value="${tmp.dir}/${cloudify.installation.dir}/tools/groovy/bin" />

		<condition property="groovy.path" value="${groovy.dir}/groovy.bat">
			<os family="windows"/>
		</condition>
		<condition property="groovy.path" value="${groovy.dir}/groovy">
			<os family="unix"/>
		</condition>
		
		<exec executable="${groovy.path}" outputproperty="cloudify.url.encoded">
			<env key="JAVA_HOME" value="${java.home}" />
			<arg value="-e" />
			<arg value="&quot;println(java.net.URLEncoder.encode('${cloudify.url}'))&quot;" />
		</exec>

		<!-- Update files in ${tmp.dir}/${cloudify.installation.dir} and in source folders -->
		<replaceregexp byline="true" 
    		match="&lt;Setting name=&quot;GigaSpaces\.XAP\.DownloadUrl&quot; value=&quot;(.*)&quot; /&gt;" 
    		replace="&lt;Setting name=&quot;GigaSpaces\.XAP\.DownloadUrl&quot; value=&quot;${cloudify.url.encoded}&quot; /&gt;">
    		<fileset
    			dir="${tmp.dir}/${cloudify.installation.dir}/tools/cli/plugins/azure/WorkerRoles/GigaSpacesWorkerRoles" 
    			includes="ServiceConfiguration.Cloud.cscfg" />
    		<fileset 
    			dir="${azure.local.copy}/GigaSpacesWorkerRoles/GigaSpacesWorkerRoles" 
    			includes="ServiceConfiguration.Cloud.cscfg" />		
    	</replaceregexp>
		
		<replaceregexp byline="true"
    		match="cloudifyUrl &quot;(.*)&quot;" 
    		replace="cloudifyUrl &quot;${cloudify.url}&quot;" >
    		<fileset 
    			dir="${tmp.dir}/${cloudify.installation.dir}/tools/cli/plugins/esc" 
    			includes="**/*-cloud.groovy" />
    		<fileset 
    			dir="${esc.local.copy}/src/main/resources/clouds" 
    			includes="**/*-cloud.groovy" />
    	</replaceregexp>
   </target>
	
	<target name="commit.service.configuration">
			
		<exec executable="svn" dir="${basedir}/..">
			<arg value="commit" />
			<arg value="--username" />
			<arg value="${svnant.repository.user}" />
			<arg value="--password" />
			<arg value="${svnant.repository.passwd}" />
			<arg value="-m" />
			<arg value="Update cloudify url" />
			<arg value="azure/GigaSpacesWorkerRoles/GigaSpacesWorkerRoles" />
			<arg value="esc/src/main/resources/clouds" />			
		</exec>
	</target>
	
    <target name="update.gs.runtime">

        <!-- define properties for temp directories -->
        <property name="src.tmp.dir" value="src-tmp-dir"/>
        <property name="dst.tmp.dir" value="dst-tmp-dir"/>

        <!-- create temp directories -->
        <mkdir dir="${src.tmp.dir}"/>
        <mkdir dir="${dst.tmp.dir}"/>

    	 <copy todir="${src.tmp.dir}">
            <fileset dir="${gigaspaces.related.folder}/src/java">
                <include name="com/j_spaces/kernel/${platform.verion.file.name}"/>
            </fileset>
        </copy>

    	<javac
            classpath="${tmp.dir}/${cloudify.installation.dir}/lib/required/${gs.runtime.jar}"
            nowarn="on"
            srcdir="${src.tmp.dir}"
            destdir="${dst.tmp.dir}"
            debug="on"
            memoryMaximumSize="512m"
            fork="yes"
            source="1.6">
        </javac>

        <jar jarfile="${tmp.dir}/${cloudify.installation.dir}/lib/required/${gs.runtime.jar}" update="true">
            <fileset dir="${dst.tmp.dir}"/>
        </jar>
    	
    	<jar jarfile="${tmp.dir}/${cloudify.installation.dir}/lib/platform/boot/${gs.boot.jar}" update="true">
            <fileset dir="${dst.tmp.dir}"/>
        </jar>

        <!-- delete temp folders -->
        <delete dir="${src.tmp.dir}"/>
        <delete dir="${dst.tmp.dir}"/>
    </target>

	<target name="prepare.env">
		<loadproperties srcfile="${basedir}/${build.properties.file}"/>
		
		<delete dir="${tmp.dir}"/>
		<mkdir dir="${tmp.dir}"/>
		
		<available file="${xap.files.tmp.dir}/${xap.zip.name}" property="appropriate.xap.zip.present"/>
		<ant target="download.zip" />
			
		<unzip src="${xap.files.tmp.dir}/${xap.zip.name}" dest="${tmp.dir}" />	
		<move file="${tmp.dir}/${xap.installation.dir}" tofile="${tmp.dir}/${cloudify.installation.dir}" />
		<chmod dir="${tmp.dir}/${cloudify.installation.dir}" includes="**/*.sh, **/*groovy*" perm="775"  />
  	</target>

	<target name="download.zip" unless="appropriate.xap.zip.present">
		<loadproperties srcfile="${basedir}/${build.properties.file}"/>
		<mkdir dir="${xap.files.tmp.dir}" /> 
		<echo message="Please wait. Downloading ${cloudify.cdn.publish.url}/com/gigaspaces/${s3.gs.publish.folder}/gigaspaces-xap-premium-${gs.version}-ga-b${gs.build.number}.zip." />
		<get verbose="true" src="${cloudify.cdn.publish.url}/com/gigaspaces/xap-core/${s3.gs.publish.folder}/${xap.zip.name}" dest="${xap.files.tmp.dir}"/>
	</target>
	
	<target name="cloudify.install">
		<exec dir="${basedir}" executable="${mvn.executable}" failonerror="true">
			<arg line="install javadoc:javadoc -Dmaven.test.skip=true"/>
		</exec>
	</target>
	
	<target name="cloudify.zip" depends="prepare.env, cloudify.install, prepare.cloudify.package" />
	<target name="bigdata.zip" depends="prepare.env, cloudify.install, prepare.bigdata.package" />
	<target name="clean.all">
		<delete dir="${tmp.dir}"/>
		<delete dir="${xap.files.tmp.dir}"/>
	</target>
</project>
