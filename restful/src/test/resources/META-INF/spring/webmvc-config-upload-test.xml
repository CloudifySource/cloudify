<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:os-core="http://www.openspaces.org/schema/core"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd

				http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
				http://www.openspaces.org/schema/core http://www.openspaces.org/schema/8.0/core/openspaces-core.xsd">

    <!-- Turns on support for mapping requests to Spring MVC @Controller methods
          Also registers default Formatters and Validators for use across all @Controllers -->
    <mvc:annotation-driven/>

    <!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources -->
    <mvc:resources location="/, classpath:/META-INF/web-resources/" mapping="/resources/**"/>

    <!-- Allows for mapping the DispatcherServlet to "/" by forwarding static resource requests to the container's default Servlet -->
    <mvc:default-servlet-handler/>

    <!-- register "global" interceptor beans to apply to all registered HandlerMappings -->
    <!-- mvc:interceptors>
         <bean class="org.springframework.web.servlet.theme.ThemeChangeInterceptor"/>
         <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" p:paramName="lang"/>
     </mvc:interceptors-->

    <!-- selects a static view for rendering without the need for an explicit controller -->
    <!-- mvc:view-controller path="/" view-name="index"/>
     <mvc:view-controller path="/uncaughtException"/>
     <mvc:view-controller path="/resourceNotFound"/>
     <mvc:view-controller path="/dataAccessFailure"/-->

    <mvc:interceptors>
			<mvc:interceptor>
				<mvc:mapping path="/**/deployments/**"/>
				<mvc:mapping path="/**/infra/**"/>
				<mvc:mapping path="/**/repo/**"/>
				<mvc:mapping path="/**/alert/**"/>
				<mvc:mapping path="/**/config/**"/>
				<mvc:mapping path="/**/upload/**"/>
				<bean class="org.cloudifysource.rest.interceptors.ApiVersionValidationAndRestResponseBuilderInterceptor"></bean>
			</mvc:interceptor>
	</mvc:interceptors>
          
    <!-- Resolves localized messages*.properties and application.properties files in the application to	allow for internationalization.
         The messages*.properties files translate Roo generated messages which are part of the admin interface, the application.properties
         resource bundle localizes all application specific messages such as entity names and menu items. -->
    <!--bean class="org.springframework.context.support.ReloadableResourceBundleMessageSource" id="messageSource"
          p:basenames="WEB-INF/i18n/messages,WEB-INF/i18n/application" p:fallbackToSystemLocale="false"/-->
          
          		<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
			<property name="basename" value="MessagesBundle"/>
		</bean>

    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- property name="prefix" value="/WEB-INF/views/" /-->
        <property name="prefix" value=""/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
         <property name="location" value="classpath*:META-INF/spring/*.properties"/>
         <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_FALLBACK"/>
     </bean-->

    <mvc:view-controller path="/" view-name="index"/>

    <bean class="org.springframework.web.servlet.view.BeanNameViewResolver"/>

    <bean id="attributeView" class="org.springframework.web.servlet.view.json.MappingJacksonJsonView"/>

    <bean id="jacksonMessageConverter"
          class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"/>
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="jacksonMessageConverter"/>
            </list>
        </property>
    </bean>

    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="100000000"/>
    </bean>

    <!-- store preferred language configuration in a cookie -->
    <bean class="org.springframework.web.servlet.i18n.CookieLocaleResolver" id="localeResolver" p:cookieName="locale"/>

    <!-- resolves localized <theme_name>.properties files in the classpath to allow for theme support -->
    <bean class="org.springframework.ui.context.support.ResourceBundleThemeSource" id="themeSource"/>

    <!-- store preferred theme configuration in a cookie -->
    <bean class="org.springframework.web.servlet.theme.CookieThemeResolver" id="themeResolver" p:cookieName="theme"
          p:defaultThemeName="standard"/>


    <!-- This bean resolves specific types of exceptions to corresponding logical - view names for error views.
          The default behaviour of DispatcherServlet - is to propagate all exceptions to the servlet container:
          this will happen - here with all other types of exceptions. -->
    <!-- bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver" p:defaultErrorView="uncaughtException">
         <property name="exceptionMappings">
             <props>
                 <prop key=".DataAccessException">dataAccessFailure</prop>
                 <prop key=".NoSuchRequestHandlingMethodException">resourceNotFound</prop>
                 <prop key=".TypeMismatchException">resourceNotFound</prop>
                 <prop key=".MissingServletRequestParameterException">resourceNotFound</prop>
             </props>
         </property>
     </bean-->

    <!-- enable this for integration of file upload functionality -->
    <!-- bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver"/-->
    <!-- bean class="org.springframework.web.servlet.view.UrlBasedViewResolver" id="tilesViewResolver">
      <property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView"/>
    </bean-->
    <!-- bean class="org.springframework.web.servlet.view.tiles2.TilesConfigurer" id="tilesConfigurer">
    <property name="definitions">
      <list>
        <value>/WEB-INF/layouts/layouts.xml</value>
        
        <value>/WEB-INF/views/**/views.xml</value>
      </list>
    </property>
  </bean-->
			
</beans>
